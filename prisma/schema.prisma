// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//TRAINEE ENROLLMENT MODULE

//TODO: create ug @unique na samting - either i unique nato ang id or mangita tag entry na pwede ma unique para mao to ang pwede i use for connect to other relations
//TODO: recheck if tanan original DateTime entries kay na revert ko to DateTime (if wala i ganito mo nalang - DateTime  @db.Date, para ma specify na date lang kunin, atleast thats how i understood prisma docs)

model Trainees {
  traineeId             Int             @id @default(autoincrement())
  firstName             String
  middleName            String?
  lastName              String
  birthDay              DateTime        @db.Date
  sex                   String
  address               String
  emailAdd              String
  cpNum                 String
  educationalAttainment String
  yearGrad              String
  SSSNum                String?
  TINNum                String?
  SGLicense             String?
  expiryDate            DateTime?       @db.Date
  registrations         Registrations[] @relation("trainees")
  transactions          transactions[]
  hasActiveRegistration Boolean         @default(false)
}

model Registrations {
  registrationNumber Int       @unique @default(autoincrement())
  dateEnrolled       DateTime  @db.Date
  registrationStatus String
  SSSNumCopy         String?
  TINNumCopy         String?
  SGLicenseCopy      String?
  expiryDateCopy     DateTime? @db.Date
  trainees           Trainees? @relation("trainees", fields: [traineeId], references: [traineeId])
  traineeId          Int?
  batch              batch?    @relation("batches", fields: [batchId], references: [batchId])
  batchId            Int?
}

//TRAINING MODULE

model batch {
  batchId       Int             @id @default(autoincrement())
  laNumber      String
  batchName     String          @unique
  startDate     DateTime        @db.Date
  endDate       DateTime        @db.Date
  maxStudents   Int
  registrations Registrations[] @relation("batches")
  courses       courses?        @relation("course", fields: [courseId], references: [courseId])
  courseId      Int?
  employee      employees       @relation(fields: [employeeId], references: [employeeId])
  employeeId    Int
  batchStatus   String          @default("Active")
}

model trainingYears {
  trainingYearId     Int       @id @default(autoincrement()) //TODO: change or revise - temporary ra nang autoinc
  trainingYearSpan   String
  trainingYearStatus String    @default("Active")
  course             courses[]
}

model courses {
  courseId          Int           @id @default(autoincrement())
  courseName        String
  courseDescription String
  requiredHours     Float
  units             Float
  trainingYears     trainingYears @relation(fields: [trainingYearsId], references: [trainingYearId])
  trainingYearsId   Int
  batch             batch[]       @relation("course")
  payables          payables[]
  courseStatus      String        @default("Active")
}

//finance module

model transactions {
  transactionId   Int        @id @default(autoincrement())
  paymentMethod   String
  paymentAmount   Float
  transactionDate DateTime?  @db.Date
  Trainees        Trainees?  @relation(fields: [traineeId], references: [traineeId])
  traineeId       Int?
  employees       employees? @relation(fields: [employeeId], references: [employeeId])
  employeeId      Int?
}

model payables {
  payableId   Int      @id @default(autoincrement())
  payableName String
  payableCost Decimal
  course      courses? @relation(fields: [courseId], references: [courseId])
  courseId    Int?
}

//administrative module

model employees {
  employeeId     Int            @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  birthDay       DateTime       @db.Date
  sex            String
  emailAdd       String
  cpNum          String
  employeeStatus String
  address        String
  dateHired      DateTime
  maritalStatus  String
  role           roles          @relation(fields: [roleId], references: [roleId])
  roleId         Int
  batch          batch[]
  transactions   transactions[]
  hasActiveBatch Boolean        @default(false)
}

model roles {
  roleId    Int         @id @default(autoincrement())
  roleName  String      @unique
  employees employees[]
}
