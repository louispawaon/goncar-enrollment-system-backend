// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//TRAINEE ENROLLMENT MODULE

//TODO: create ug @unique na samting - either i unique nato ang id or mangita tag entry na pwede ma unique para mao to ang pwede i use for connect to other relations
//TODO: recheck if tanan original DateTime entries kay na revert ko to DateTime (if wala i ganito mo nalang - DateTime  @db.Date, para ma specify na date lang kunin, atleast thats how i understood prisma docs)

model Trainees {
  traineeId             Int             @id @default(autoincrement())
  firstName             String
  middleName            String
  lastName              String
  birthDay              DateTime        @db.Date
  sex                   String
  address               String
  emailAdd              String          @unique
  cpNum                 String
  educationalAttainment String
  yearGrad              String
  SSSNum                String?
  TINNum                String?
  SGLicense             String?
  expiryDate            DateTime?       @db.Date
  registrations         Registrations[] @relation("trainees")
}

model Registrations {
  registrationNumber Int            @unique @default(autoincrement())
  dateEnrolled       DateTime       @db.Date
  registrationStatus String
  trainees           Trainees?      @relation("trainees", fields: [traineeId], references: [traineeId])
  traineeId          Int?
  batch              batch?         @relation("batches", fields: [batchId], references: [batchId])
  batchId            Int?
  transactions       transactions[] @relation("registration")

  //courses            courses?       @relation("course", fields: [courseId], references: [courseId])
  //courseId           Int?
  //trainingYears      trainingYears? @relation(fields: [trainingYearId], references: [trainingYearId])
  //trainingYearId     Int?
  @@unique([batchId])
}

//TRAINING MODULE

model batch {
  batchId        Int             @id @default(autoincrement())
  laNumber       String
  batchName      String          @unique
  startDate      DateTime        @db.Date
  endDate        DateTime        @db.Date
  maxStudents    Int
  registrations  Registrations[] @relation("batches")
  courses        courses?        @relation("course", fields: [courseId], references: [courseId])
  courseId       Int?
  trainingYears  trainingYears?  @relation(fields: [trainingYearId], references: [trainingYearId])
  trainingYearId Int?
  employees      employees?      @relation(fields: [employeeId], references: [employeeId])
  employeeId     Int?
}

model tuitionview {
  tuitionViewId  Int            @id @default(autoincrement())
  tuition        Float
  courses        courses?       @relation("course", fields: [courseId], references: [courseId])
  courseId       Int?
  trainingYears  trainingYears? @relation(fields: [trainingYearId], references: [trainingYearId])
  trainingYearId Int?
}

model trainingYears {
  trainingYearId   Int           @id @default(autoincrement()) //TODO: change or revise - temporary ra nang autoinc
  trainingYearSpan String
  tuitionview      tuitionview[]
  batch            batch[]
  payables         payables[]
  //registration     Registrations[]
}

model courses {
  courseId          Int            @id @default(autoincrement())
  courseName        String
  courseDescription String
  requiredHours     Float
  units             Float
  //registration      Registrations[] @relation("course")
  batch             batch[]        @relation("course")
  tuitionview       tuitionview[]  @relation("course")
  payables          payables[]     @relation("course")
  payableName       payableNames[] @relation("course")
}

//finance module

model transactions {
  transactionId     Int            @id
  payableCost       Float
  paymentMethod     String
  Registrations     Registrations? @relation("registration", fields: [registraionNumber], references: [registrationNumber])
  registraionNumber Int?
  payables          payables?      @relation("payable", fields: [payableId], references: [payableId])
  payableId         Int?           @unique
}

model payables {
  payableId          Int            @id @unique
  payableCost        Float
  payableTransaction transactions[] @relation("payable")
  courses            courses?       @relation("course", fields: [courseId], references: [courseId])
  courseId           Int?
  trainingYears      trainingYears? @relation(fields: [trainingYearId], references: [trainingYearId])
  trainingYearId     Int?
}

model payableNames {
  payableID   Int      @id @default(autoincrement()) //TODO: change or revise - temporary ra sa nang autoinc
  payableName String   @unique
  courses     courses? @relation("course", fields: [courseId], references: [courseId])
  courseId    Int?
}

//administrative module

model employees {
  employeeId     Int      @id @default(autoincrement())
  roleId         Int
  firstName      String
  middleName     String
  lastName       String
  birthDay       DateTime @db.Date
  sex            String
  emailAdd       String
  cpNum          String
  employeeStatus String
  dateHired      DateTime
  batch          batch[]
}

model roles {
  roleId   Int    @id @default(autoincrement())
  roleName String
}

enum Role {
  BASIC
  ADMIN
  EDITOR
}
